type Company {
  id: ID!
  cik: String!
  sic: String!
  name: String!
  website: String
  description: String
  ceo: String
  employees: Int
  state: String
  country: String
  sector: Sector!
  industry: Industry!
  tags: [CompanyTag!]!
  securities: [Security!]!
  similar: [Company!]!
}

type Security {
  id: ID!
  type: SecurityType!
  market: Market!
  locale: String!
  currency: String!
  symbol: String!
  marketcap: String!
  bloomberg: String!
  exchange: Exchange!
}

type SecurityType {
  code: String!
  description: String!
}

type CompanyTag {
  name: String!
}

type Market {
  name: String!
  description: String!
}

type Exchange {
  id: ID!
  type: String!
  name: String!
  market: String!
  tape: String!
  mic: String!
  securities: [Security!]!
}

type Sector {
  id: ID!
  name: String!
  companies: [Company!]!
}

type Industry {
  id: ID!
  name: String!
  companies: [Company!]!
}

type Tag {
  id: ID!
  name: String!
}

type List {
  id: ID!
  name: String!
  private: Boolean!
  items: [String!]!
  updated: String!
  created: String!
}

input ListInput {
  name: String!
  private: Boolean!
}

extend type Query {
  sectors(limit: Int!, offset: Int!): [Sector!]!
  industries(limit: Int!, offset: Int!): [Industry!]!
}

extend type Mutation {
  createList(data: ListInput!): List!
  updateList(id: ID!, data: ListInput!): List!
  deleteList(id: ID!): String!
}
