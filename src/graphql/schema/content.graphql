enum PublicationStatus {
  public
  draft
}

enum PostContentFormat {
  html
  markdown
}

enum ReactionType {
  like
  dislike
  love
  hate
}

enum AttachmentType {
  media
  web
}

union ActionableContent = Post | Idea

type Community {
  id: ID!
  name: String!
  description: String
  posts(limit: Int!, offset: Int!): [Post!]!
  ideas(limit: Int!, offset: Int!): [Idea!]!
  members(limit: Int!, offset: Int!): [UserProfile!]!
  created: String!
  updated: String!
}

type Post {
  id: ID!
  author: UserProfile
  publicationStatus: PublicationStatus!
  contentFormat: PostContentFormat!
  title: String!
  summary: String
  imageURL: String
  content: String!
  replies(limit: Int!, offset: Int!): [Idea!]!
  reactions(limit: Int!, offset: Int!): [Reaction!]!
  reactionCount: Int!
  replyCount: Int!
  reactionStatus: Reaction
  created: String!
  updated: String!
}

type Idea {
  id: ID!
  author: UserProfile
  message: String!
  attachments: [Attachment!]
  replyStatus: Idea
  replies(limit: Int!, offset: Int!): [Idea!]
  reactions(limit: Int!, offset: Int!): [Reaction!]!
  reactionCount: Int!
  replyCount: Int!
  reactionStatus: Reaction
  created: String!
  updated: String!
}

type Attachment {
  type: AttachmentType!
  url: String
}

type Reaction {
  id: ID!
  from: UserProfile!
  to: ActionableContent!
  reaction: String!
  timestamp: String!
}

input PostInput {
  publicationStatus: PublicationStatus!
  contentFormat: PostContentFormat!
  title: String!
  content: String
  summary: String
  imageURL: String
}

input IdeaInput {
  replyStatus: ID
  message: String!
}

input Filters {
  query: String
  symbols: [String!]
  limit: Int!
  offset: Int!
}

extend type Mutation {
  createPost(data: PostInput!): Post!
  updatePost(id: ID!, data: PostInput!): Post!
  deletePost(id: ID!): String!
  createIdea(data: IdeaInput!): Idea!
  updateIdea(id: ID!, message: String!): Idea!
  deleteIdea(id: ID!): String!
  createReaction(to: ID!, reaction: ReactionType!): String!
  deleteReaction(id: ID!): String!
  reportContent(id: ID!): String!
}

extend type Query {
  postByID(id: ID!): Post!
  ideaByID(id: ID!): Idea!
  postDrafts: [Post!]!
  posts(filters: Filters): [Post!]!
  ideas(filters: Filters): [Idea!]!
}
